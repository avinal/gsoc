(self.webpackChunkgosc_2021=self.webpackChunkgosc_2021||[]).push([[8075],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return c},kt:function(){return p}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=u(r),p=a,h=m["".concat(l,".").concat(p)]||m[p]||d[p]||i;return r?n.createElement(h,s(s({ref:t},c),{},{components:r})):n.createElement(h,s({ref:t},c))}));function p(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var u=2;u<i;u++)s[u]=r[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9809:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return m}});var n=r(2122),a=r(9756),i=(r(7294),r(3905)),s=["components"],o={title:"Week 3",author:"Omar AbdelSamea"},l=void 0,u={unversionedId:"2021/microservice/updates/2021-06-22",id:"2021/microservice/updates/2021-06-22",isDocsHomePage:!1,title:"Week 3",description:"\x3c!--",source:"@site/docs/2021/microservice/updates/2021-06-22.md",sourceDirName:"2021/microservice/updates",slug:"/2021/microservice/updates/2021-06-22",permalink:"/gsoc/docs/2021/microservice/updates/2021-06-22",editUrl:"https://github.com/fossology/gsoc-2021/edit/master/docs/docs/2021/microservice/updates/2021-06-22.md",version:"current",frontMatter:{title:"Week 3",author:"Omar AbdelSamea"},sidebar:"2021",previous:{title:"Week 2",permalink:"/gsoc/docs/2021/microservice/updates/2021-06-15"},next:{title:"Week 4",permalink:"/gsoc/docs/2021/microservice/updates/2021-06-29"}},c=[{value:"Meeting 0",id:"meeting-0",children:[{value:"Organizer",id:"organizer",children:[]},{value:"Attendees",id:"attendees",children:[]},{value:"Outcomes",id:"outcomes",children:[]}]},{value:"Meeting 1",id:"meeting-1",children:[{value:"Organizer",id:"organizer-1",children:[]},{value:"Attendees",id:"attendees-1",children:[]},{value:"Outcomes",id:"outcomes-1",children:[]}]},{value:"End of the week results",id:"end-of-the-week-results",children:[]},{value:"Diagrams",id:"diagrams",children:[{value:"using ClusterIP with agents",id:"using-clusterip-with-agents",children:[]},{value:"using headless services with agents",id:"using-headless-services-with-agents",children:[]}]}],d={toc:c};function m(e){var t=e.components,r=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"coding-week-3"},"Coding Week 3"),(0,i.kt)("h2",{id:"meeting-0"},"Meeting 0"),(0,i.kt)("h3",{id:"organizer"},"Organizer"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Gaurav Mishra")),(0,i.kt)("h3",{id:"attendees"},"Attendees"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Omar AbdelSamea")),(0,i.kt)("h3",{id:"outcomes"},"Outcomes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Traced source code to see how the scheduler should be modified to accept single agent on each host."),(0,i.kt)("li",{parentName:"ul"},"we found that:"),(0,i.kt)("li",{parentName:"ul"},"function ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OmarAbdelSamea/fossology/blob/master/src/scheduler/agent/agent.c#L249"},"agent_test")," should be modified to only test the agent found inside the host"),(0,i.kt)("li",{parentName:"ul"},"to get the agent type inside the host a new parameter should be added in fossology.conf ")),(0,i.kt)("h2",{id:"meeting-1"},"Meeting 1"),(0,i.kt)("h3",{id:"organizer-1"},"Organizer"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Gaurav Mishra")),(0,i.kt)("h3",{id:"attendees-1"},"Attendees"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Anupam Ghosh"),(0,i.kt)("li",{parentName:"ul"},"Ayush Bharadwaj"),(0,i.kt)("li",{parentName:"ul"},"Vasudev Maduri"),(0,i.kt)("li",{parentName:"ul"},"Kaushlendra Singh"),(0,i.kt)("li",{parentName:"ul"},"Shreya Pratap"),(0,i.kt)("li",{parentName:"ul"},"Omar AbdelSamea")),(0,i.kt)("h3",{id:"outcomes-1"},"Outcomes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Presented some enhancement on adding a single service for all agents."),(0,i.kt)("li",{parentName:"ul"},"Discussed the Scheduler Host problem and how it could be implemented in the next week.")),(0,i.kt)("h2",{id:"end-of-the-week-results"},"End of the week results"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Implemented headless services instead of ClusterIP for each agent."),(0,i.kt)("li",{parentName:"ul"},"Used headless service for scheduler instead of ClusterIP."),(0,i.kt)("li",{parentName:"ul"},"Used ClusterIP with database instead of NodePort as the database doesn't need to be exposed."),(0,i.kt)("li",{parentName:"ul"},"Added Config Maps and Secrets for database."),(0,i.kt)("li",{parentName:"ul"},"Fixed a bug in Dockerfiles (debian package version was hardcoded, solution was replacing version with *)"),(0,i.kt)("li",{parentName:"ul"},"Enhanced scheduler Dockerfile, instead of installing web.deb to get chore-schema.dat just copied it from source code."),(0,i.kt)("li",{parentName:"ul"},"Used stateful set with database instead of deployment.")),(0,i.kt)("p",null,"Links: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/OmarAbdelSamea/fossology/tree/OmarAbdelSamea/GSoC/Microservices/k8s"},"https://github.com/OmarAbdelSamea/fossology/tree/OmarAbdelSamea/GSoC/Microservices/k8s")),(0,i.kt)("h2",{id:"diagrams"},"Diagrams"),(0,i.kt)("h3",{id:"using-clusterip-with-agents"},"using ClusterIP with agents"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/57943026/124268824-58d6f280-db3a-11eb-85fd-e377f932ec8a.png",alt:"image"})),(0,i.kt)("h3",{id:"using-headless-services-with-agents"},"using headless services with agents"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/57943026/124268388-b9196480-db39-11eb-84c1-d5ebd57009e0.png",alt:"image"})))}m.isMDXComponent=!0}}]);