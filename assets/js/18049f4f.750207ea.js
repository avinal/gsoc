(self.webpackChunkgosc_2021=self.webpackChunkgosc_2021||[]).push([[1364],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return h}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),h=i,m=u["".concat(s,".").concat(h)]||u[h]||p[h]||r;return n?a.createElement(m,o(o({ref:t},d),{},{components:n})):a.createElement(m,o({ref:t},d))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8871:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return d},default:function(){return u}});var a=n(2122),i=n(9756),r=(n(7294),n(3905)),o=["components"],l={title:"Week 4.3",author:"Sarita"},s=void 0,c={unversionedId:"2021/scancode/updates/2021-07-02",id:"2021/scancode/updates/2021-07-02",isDocsHomePage:!1,title:"Week 4.3",description:"\x3c!--",source:"@site/docs/2021/scancode/updates/2021-07-02.md",sourceDirName:"2021/scancode/updates",slug:"/2021/scancode/updates/2021-07-02",permalink:"/gsoc/docs/2021/scancode/updates/2021-07-02",editUrl:"https://github.com/fossology/gsoc-2021/edit/master/docs/docs/2021/scancode/updates/2021-07-02.md",version:"current",frontMatter:{title:"Week 4.3",author:"Sarita"},sidebar:"2021",previous:{title:"Week 4.2",permalink:"/gsoc/docs/2021/scancode/updates/2021-06-29"},next:{title:"Week 5.1",permalink:"/gsoc/docs/2021/scancode/updates/2021-07-06"}},d=[{value:"Coding Week 4 Meeting 3",id:"coding-week-4-meeting-3",children:[{value:"Attendees",id:"attendees",children:[]},{value:"Week 4.2 Progress",id:"week-42-progress",children:[]},{value:"Discussions",id:"discussions",children:[]},{value:"Conclusion and Further Plans",id:"conclusion-and-further-plans",children:[]}]}],p={toc:d};function u(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"coding-week-4-meeting-3"},"Coding Week 4 Meeting 3"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Date:2021-07-02")),(0,r.kt)("h3",{id:"attendees"},"Attendees"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/GMishx"},"Gaurav Mishra ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/avinal"},"Avinal Kumar ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/itssingh"},"Sarita Singh "))),(0,r.kt)("h3",{id:"week-42-progress"},"Week 4.2 Progress"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Created ",(0,r.kt)("inlineCode",{parentName:"li"},"scancode_copyright")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"scancode_author")," table in the FOSSology database."),(0,r.kt)("li",{parentName:"ul"},"Copyright and author information coming from scancode scan result is inserted in these newly created tables."),(0,r.kt)("li",{parentName:"ul"},"Improved license data insertion in the ",(0,r.kt)("inlineCode",{parentName:"li"},"license_file")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"highlight")," tables by inserting only unique entries based upon ",(0,r.kt)("inlineCode",{parentName:"li"},"rf_fk"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"agent_fk"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"pfile_fk"),". It solved UI glitch in license relevant text highlighting for scancode."),(0,r.kt)("li",{parentName:"ul"},"Latest ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/itssingh/fossology/commit/c823ecf7a5d59fbfe243281c41598ea161e04435"},"commit")," having code to create tables.")),(0,r.kt)("h3",{id:"discussions"},"Discussions"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Using ",(0,r.kt)("inlineCode",{parentName:"p"},"S")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"L")," for ScanCode type field in the highlight table where ",(0,r.kt)("inlineCode",{parentName:"p"},"S")," will be match property of the highlight class in HighlightDao.php."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Added a new type ",(0,r.kt)("inlineCode",{parentName:"li"},"S")," in the ",(0,r.kt)("inlineCode",{parentName:"li"},"HighlightDao.php")," also changed type from ",(0,r.kt)("inlineCode",{parentName:"li"},"signature")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"match")," as like monk agent ScanCode matches text."),(0,r.kt)("li",{parentName:"ul"},"Gaurav explained about identical displayed on the UI by monk scanner as, It highlight those text which are identical with the license text in the license_ref table. Whereas license relevant text means the highlighted text has been matched with license text or rules written for the license. "),(0,r.kt)("li",{parentName:"ul"},"So license relevant text is suitable for the ScanCode highlight."),(0,r.kt)("li",{parentName:"ul"},"Also Gaurav suggested to reuse the resources already present and no need to add a new type for scancode highlight, nomos type could be reused."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Sarita(Me) shows newly created tables for scancode_copyright and scancode_author. Gaurav approved changes.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Added a function in the scancode database to insert no license in the license_file table for a code zip have no license."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  bool ScancodeDatabaseHandler::insertNoResultInDatabase(int agentId, long pFileId ){\n    return saveLicenseMatch(agentId, pFileId, 320, NULL);\n  }\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Gaurav clarified that ",(0,r.kt)("inlineCode",{parentName:"p"},"320")," is not constant licenseId for no-license. So instead leave licenseId null. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"There is still a discussion needed (with other mentors) to decide is no license case is needed to take care for ScanCode or not."))),(0,r.kt)("h3",{id:"conclusion-and-further-plans"},"Conclusion and Further Plans"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Start implementing UI to make scancode a parameterized agent."),(0,r.kt)("li",{parentName:"ul"},"Discuss about ",(0,r.kt)("inlineCode",{parentName:"li"},"no license/copyright/author")," case for scancode.")))}u.isMDXComponent=!0}}]);